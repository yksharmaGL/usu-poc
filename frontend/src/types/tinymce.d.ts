declare module 'tinymce/tinymce';
declare module 'tinymce/themes/silver';
declare module 'tinymce/plugins/*';
declare module 'tinymce/icons/default';
declare module 'tinymce/skins/ui/oxide/skin.min.css';
declare module 'tinymce/skins/ui/oxide/content.min.css';
declare module 'tinymce/skins/content/default/content.min.css';
declare module '@tinymce/tinymce-react' {
  import { ComponentType } from 'react';
  
  interface IAllProps {
    apiKey?: string;
    id?: string;
    inline?: boolean;
    init?: any;
    initialValue?: string;
    onBeforeAddUndo?: (event: any, editor: any) => void;
    onBeforeExecCommand?: (event: any, editor: any) => void;
    onBeforeGetContent?: (event: any, editor: any) => void;
    onBeforeRenderUI?: (event: any, editor: any) => void;
    onBeforeSetContent?: (event: any, editor: any) => void;
    onBeforeUndo?: (event: any, editor: any) => void;
    onBlur?: (event: any, editor: any) => void;
    onChange?: (content: string, editor: any) => void;
    onClearUndos?: (event: any, editor: any) => void;
    onClick?: (event: any, editor: any) => void;
    onContextMenu?: (event: any, editor: any) => void;
    onCopy?: (event: any, editor: any) => void;
    onCut?: (event: any, editor: any) => void;
    onDblclick?: (event: any, editor: any) => void;
    onDeactivate?: (event: any, editor: any) => void;
    onDirtyStateChange?: (event: any, editor: any) => void;
    onDrag?: (event: any, editor: any) => void;
    onDragDrop?: (event: any, editor: any) => void;
    onDragEnd?: (event: any, editor: any) => void;
    onDragGesture?: (event: any, editor: any) => void;
    onDragOver?: (event: any, editor: any) => void;
    onDrop?: (event: any, editor: any) => void;
    onExecCommand?: (event: any, editor: any) => void;
    onFocus?: (event: any, editor: any) => void;
    onFocusIn?: (event: any, editor: any) => void;
    onFocusOut?: (event: any, editor: any) => void;
    onGetContent?: (event: any, editor: any) => void;
    onHide?: (event: any, editor: any) => void;
    onInit?: (event: any, editor: any) => void;
    onKeyDown?: (event: any, editor: any) => void;
    onKeyPress?: (event: any, editor: any) => void;
    onKeyUp?: (event: any, editor: any) => void;
    onLoadContent?: (event: any, editor: any) => void;
    onMouseDown?: (event: any, editor: any) => void;
    onMouseEnter?: (event: any, editor: any) => void;
    onMouseLeave?: (event: any, editor: any) => void;
    onMouseMove?: (event: any, editor: any) => void;
    onMouseOut?: (event: any, editor: any) => void;
    onMouseOver?: (event: any, editor: any) => void;
    onMouseUp?: (event: any, editor: any) => void;
    onNodeChange?: (event: any, editor: any) => void;
    onObjectResizeStart?: (event: any, editor: any) => void;
    onObjectResized?: (event: any, editor: any) => void;
    onObjectSelected?: (event: any, editor: any) => void;
    onPaste?: (event: any, editor: any) => void;
    onPostProcess?: (event: any, editor: any) => void;
    onPostRender?: (event: any, editor: any) => void;
    onPreProcess?: (event: any, editor: any) => void;
    onProgressState?: (event: any, editor: any) => void;
    onRedo?: (event: any, editor: any) => void;
    onRemove?: (event: any, editor: any) => void;
    onReset?: (event: any, editor: any) => void;
    onSaveContent?: (event: any, editor: any) => void;
    onSelectionChange?: (event: any, editor: any) => void;
    onSetAttrib?: (event: any, editor: any) => void;
    onSetContent?: (event: any, editor: any) => void;
    onShow?: (event: any, editor: any) => void;
    onSubmit?: (event: any, editor: any) => void;
    onUndo?: (event: any, editor: any) => void;
    onVisualAid?: (event: any, editor: any) => void;
    outputFormat?: 'html' | 'text';
    plugins?: string | string[];
    tagName?: string;
    textareaProps?: { [key: string]: unknown };
    tinymceScriptSrc?: string;
    toolbar?: string | string[] | boolean;
    value?: string;
  }

  const Editor: ComponentType<IAllProps>;
  export { Editor };
}
